// Importar las funciones necesarias de Firebaseeee
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js";
import {
    getAuth,
    signOut,
    updatePassword,
    reauthenticateWithCredential,
    EmailAuthProvider,
    deleteUser
} from "https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js";
import {
    getFirestore,
    doc,
    getDoc,
    updateDoc,
    deleteDoc,
    collection,
    query,
    where,
    getDocs,
    serverTimestamp
} from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js";
import { getStorage, ref, uploadBytes, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-storage.js";

// Configuración de Firebaseeee
const firebaseConfig = {
    apiKey: "AIzaSyBTbsFSstA_4mYG4E6FnB5o4Z2Nu_AqmHw",
    authDomain: "isabella-castro.firebaseapp.com",
    projectId: "isabella-castro",
    storageBucket: "isabella-castro.appspot.com",
    messagingSenderId: "244493221667",
    appId: "1:244493221667:web:4d7707abb3f4a97cce9696",
    measurementId: "G-0TT9E180Y4"
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

// Función para inicializar el dashboard
document.addEventListener("DOMContentLoaded", () => {
    // Inicializar el menú desplegable de perfil
    initProfileDropdown();

    // Crear círculos para el fondo animado
    createBackgroundCircles();

    // Verificar si el usuario está autenticado
    checkAuthStatus();

    // Inicializar eventos de los botones
    initButtonEvents();
});

// Función para inicializar el menú desplegable de perfil
function initProfileDropdown() {
    const profileButton = document.getElementById("profileButton");
    const profileDropdown = document.getElementById("profileDropdown");

    // Mostrar/ocultar el menú desplegable al hacer clic en el botón de perfil
    profileButton.addEventListener("click", (e) => {
        e.stopPropagation();
        if (profileDropdown.style.display === "block") {
            profileDropdown.style.display = "none";
        } else {
            profileDropdown.style.display = "block";
        }
    });

    // Cerrar el menú desplegable al hacer clic fuera de él
    document.addEventListener("click", (e) => {
        if (!profileDropdown.contains(e.target) && e.target !== profileButton) {
            profileDropdown.style.display = "none";
        }
    });
}

// Función para crear círculos para el fondo animado
function createBackgroundCircles() {
    const connectionsContainer = document.getElementById("connections");

    // Crear 15 círculos con diferentes tamaños y posiciones
    for (let i = 0; i < 15; i++) {
        const circle = document.createElement("div");
        circle.classList.add("circle");

        // Tamaño aleatorio entre 50px y 150px
        const size = Math.floor(Math.random() * 100) + 50;
        circle.style.width = `${size}px`;
        circle.style.height = `${size}px`;

        // Posición aleatoria
        const posX = Math.floor(Math.random() * 100);
        const posY = Math.floor(Math.random() * 100);
        circle.style.left = `${posX}%`;
        circle.style.top = `${posY}%`;

        // Duración de animación aleatoria entre 15s y 30s
        const duration = Math.floor(Math.random() * 15) + 15;
        circle.style.animationDuration = `${duration}s`;

        // Retraso de animación aleatorio
        const delay = Math.floor(Math.random() * 10);
        circle.style.animationDelay = `${delay}s`;

        connectionsContainer.appendChild(circle);
    }
}

// Función para verificar si el usuario está autenticado
function checkAuthStatus() {
    auth.onAuthStateChanged(function(user) {
        if (!user) {
            // Usuario no autenticado, redirigir al login
            window.location.href = '../index.html';
        } else {
            // Usuario autenticado, cargar datos del perfil
            loadUserProfile(user);

            // Cargar estadísticas del usuario
            loadUserStats(user.uid);

            // Cargar actividad reciente
            loadRecentActivity(user.uid);

            // Cargar chats recientes
            loadRecentChats(user.uid);
        }
    });
}

// Función para cargar los datos del perfil del usuario
function loadUserProfile(user) {
    const userRef = doc(db, "users", user.uid);

    getDoc(userRef).then((docSnapshot) => {
        if (docSnapshot.exists()) {
            const userData = docSnapshot.data();

            // Actualizar nombre y email en el menú desplegable
            document.querySelector('.dropdown-user-info h3').textContent = userData.name || user.displayName || 'Usuario';
            document.querySelector('.dropdown-user-info p').textContent = userData.email || user.email;

            // Actualizar iniciales en el avatar
            const userName = userData.name || user.displayName || 'Usuario';
            const initials = userName.split(' ').map(n => n[0]).join('');

            const avatarPlaceholders = document.querySelectorAll('.avatar-placeholder');
            avatarPlaceholders.forEach(placeholder => {
                placeholder.textContent = initials;
            });

            // Si hay imagen de perfil, mostrarla
            if (userData.profileImage) {
                // Aquí se podría implementar la lógica para mostrar la imagen de perfil
                // Por ejemplo, crear elementos de imagen y reemplazar los placeholders
            }
        } else {
            // Si no existe el documento del usuario, crearlo
            setDoc(doc(db, "users", user.uid), {
                name: user.displayName || 'Usuario',
                email: user.email,
                createdAt: serverTimestamp(),
                profileImage: user.photoURL || ""
            });
        }
    }).catch(error => {
        console.error("Error al cargar el perfil:", error);
        showNotification("Error al cargar el perfil", "error");
    });
}

// Función para cargar estadísticas del usuario
function loadUserStats(userId) {
    // Contar mensajes enviados
    const messagesQuery = query(
        collection(db, "chats"),
        where("participants", "array-contains", userId)
    );

    getDocs(messagesQuery).then(chatSnapshots => {
        let messageCount = 0;
        let chatCount = chatSnapshots.size;

        // Actualizar contador de chats
        const chatCountElement = document.querySelector('.stat-card:nth-child(3) .stat-info p');
        if (chatCountElement) {
            chatCountElement.textContent = chatCount;
        }

        // Contar mensajes en cada chat
        const messageCountPromises = chatSnapshots.docs.map(chatDoc => {
            return getDocs(collection(db, "chats", chatDoc.id, "messages"))
                .then(messageSnapshots => {
                    return messageSnapshots.size;
                });
        });

        Promise.all(messageCountPromises).then(messageCounts => {
            messageCount = messageCounts.reduce((total, count) => total + count, 0);

            // Actualizar contador de mensajes
            const messageCountElement = document.querySelector('.stat-card:nth-child(1) .stat-info p');
            if (messageCountElement) {
                messageCountElement.textContent = messageCount;
            }
        });
    }).catch(error => {
        console.error("Error al cargar estadísticas:", error);
    });

    // Contar contactos (usuarios con los que ha chateado)
    const contactsSet = new Set();

    getDocs(messagesQuery).then(chatSnapshots => {
        chatSnapshots.forEach(chatDoc => {
            const chatData = chatDoc.data();
            if (chatData.participants) {
                chatData.participants.forEach(participantId => {
                    if (participantId !== userId) {
                        contactsSet.add(participantId);
                    }
                });
            }
        });

        // Actualizar contador de contactos
        const contactCountElement = document.querySelector('.stat-card:nth-child(2) .stat-info p');
        if (contactCountElement) {
            contactCountElement.textContent = contactsSet.size;
        }
    }).catch(error => {
        console.error("Error al cargar contactos:", error);
    });
}

// Función para cargar actividad reciente
function loadRecentActivity(userId) {
    // Consultar los chats más recientes donde el usuario es participante
    const chatsQuery = query(
        collection(db, "chats"),
        where("participants", "array-contains", userId)
    );

    getDocs(chatsQuery).then(async(chatSnapshots) => {
        // Ordenar chats por lastMessageTime
        const chats = chatSnapshots.docs
            .map(doc => ({ id: doc.id, ...doc.data() }))
            .sort((a, b) => {
                const timeA = a.lastMessageTime ? a.lastMessageTime.toMillis() : 0;
                const timeB = b.lastMessageTime ? b.lastMessageTime.toMillis() : 0;
                return timeB - timeA; // Orden descendente
            })
            .slice(0, 3); // Tomar solo los 3 más recientes

        // Obtener información de los usuarios para mostrar nombres
        const userPromises = [];
        const userIds = new Set();

        chats.forEach(chat => {
            chat.participants.forEach(participantId => {
                if (participantId !== userId) {
                    userIds.add(participantId);
                }
            });
        });

        userIds.forEach(id => {
            userPromises.push(getDoc(doc(db, "users", id)));
        });

        const userDocs = await Promise.all(userPromises);
        const users = {};

        userDocs.forEach(userDoc => {
            if (userDoc.exists()) {
                users[userDoc.id] = userDoc.data();
            }
        });

        // Crear elementos de actividad
        const activityList = document.querySelector('.activity-list');
        if (activityList) {
            activityList.innerHTML = ''; // Limpiar lista

            chats.forEach(chat => {
                // Encontrar el otro participante
                const otherParticipantId = chat.participants.find(id => id !== userId);
                const otherUser = users[otherParticipantId] || { name: 'Usuario desconocido' };

                // Crear elemento de actividad
                const activityItem = document.createElement('div');
                activityItem.className = 'activity-item';

                // Obtener iniciales para el avatar
                const initials = otherUser.name.split(' ').map(n => n[0]).join('');

                // Formatear tiempo
                const timeAgo = formatTimeAgo(chat.lastMessageTime);

                activityItem.innerHTML = `
                    <div class="activity-avatar">
                        <div class="avatar-placeholder">${initials}</div>
                    </div>
                    <div class="activity-info">
                        <p><strong>${otherUser.name}</strong> ${chat.isGroupChat ? 'envió un mensaje al grupo' : 'te envió un mensaje'}</p>
                        <span class="activity-time">${timeAgo}</span>
                    </div>
                `;

                activityList.appendChild(activityItem);
            });

            // Si no hay actividad, mostrar mensaje
            if (chats.length === 0) {
                activityList.innerHTML = '<p class="no-data">No hay actividad reciente</p>';
            }
        }
    }).catch(error => {
        console.error("Error al cargar actividad reciente:", error);
    });
}

// Función para cargar chats recientes
function loadRecentChats(userId) {
    // Consultar los chats más recientes donde el usuario es participante
    const chatsQuery = query(
        collection(db, "chats"),
        where("participants", "array-contains", userId)
    );

    getDocs(chatsQuery).then(async(chatSnapshots) => {
        // Ordenar chats por lastMessageTime
        const chats = chatSnapshots.docs
            .map(doc => ({ id: doc.id, ...doc.data() }))
            .sort((a, b) => {
                const timeA = a.lastMessageTime ? a.lastMessageTime.toMillis() : 0;
                const timeB = b.lastMessageTime ? b.lastMessageTime.toMillis() : 0;
                return timeB - timeA; // Orden descendente
            })
            .slice(0, 2); // Tomar solo los 2 más recientes

        // Obtener información de los usuarios para mostrar nombres
        const userPromises = [];
        const userIds = new Set();

        chats.forEach(chat => {
            chat.participants.forEach(participantId => {
                if (participantId !== userId) {
                    userIds.add(participantId);
                }
            });
        });

        userIds.forEach(id => {
            userPromises.push(getDoc(doc(db, "users", id)));
        });

        const userDocs = await Promise.all(userPromises);
        const users = {};

        userDocs.forEach(userDoc => {
            if (userDoc.exists()) {
                users[userDoc.id] = userDoc.data();
            }
        });

        // Crear elementos de chat reciente
        const recentChats = document.querySelector('.recent-chats');
        if (recentChats) {
            recentChats.innerHTML = ''; // Limpiar lista

            chats.forEach(chat => {
                // Encontrar el otro participante
                const otherParticipantId = chat.participants.find(id => id !== userId);
                const otherUser = users[otherParticipantId] || { name: 'Usuario desconocido' };

                // Crear elemento de chat reciente
                const chatItem = document.createElement('div');
                chatItem.className = 'recent-chat-item';
                chatItem.setAttribute('data-chat-id', chat.id);

                // Obtener iniciales para el avatar
                const initials = otherUser.name.split(' ').map(n => n[0]).join('');

                chatItem.innerHTML = `
                    <div class="chat-avatar">
                        <div class="avatar-placeholder">${initials}</div>
                        <span class="status-indicator ${Math.random() > 0.5 ? 'online' : 'offline'}"></span>
                    </div>
                    <div class="chat-preview">
                        <h3>${otherUser.name}</h3>
                        <p>${chat.lastMessage || 'No hay mensajes'}</p>
                    </div>
                `;

                // Añadir evento para ir al chat
                chatItem.addEventListener('click', () => {
                    window.location.href = `../Html/chat.html?chatId=${chat.id}`;
                });

                recentChats.appendChild(chatItem);
            });

            // Si no hay chats, mostrar mensaje
            if (chats.length === 0) {
                recentChats.innerHTML = '<p class="no-data">No hay chats recientes</p>';
            }
        }
    }).catch(error => {
        console.error("Error al cargar chats recientes:", error);
    });
}

// Función para formatear tiempo relativo
function formatTimeAgo(timestamp) {
    if (!timestamp) return 'Fecha desconocida';

    const now = new Date();
    const time = timestamp.toDate();
    const diffMs = now - time;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);

    if (diffSec < 60) {
        return 'Ahora mismo';
    } else if (diffMin < 60) {
        return `Hace ${diffMin} ${diffMin === 1 ? 'minuto' : 'minutos'}`;
    } else if (diffHour < 24) {
        return `Hace ${diffHour} ${diffHour === 1 ? 'hora' : 'horas'}`;
    } else if (diffDay < 7) {
        return `Hace ${diffDay} ${diffDay === 1 ? 'día' : 'días'}`;
    } else {
        const day = time.getDate();
        const month = time.getMonth() + 1;
        const year = time.getFullYear();
        return `${day}/${month}/${year}`;
    }
}

// Función para mostrar notificaciones
function showNotification(message, type = 'success') {
    // Crear elemento de notificación
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    // Añadir al DOM
    document.body.appendChild(notification);

    // Mostrar con animación
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);

    // Ocultar después de 3 segundos
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// Función para inicializar eventos de los botones
function initButtonEvents() {
    // Botón de cerrar sesión
    const logoutButton = document.getElementById("logoutButton");
    if (logoutButton) {
        logoutButton.addEventListener("click", (e) => {
            e.preventDefault();

            signOut(auth).then(() => {
                showNotification("Sesión cerrada correctamente");
                setTimeout(() => {
                    window.location.href = "../index.html";
                }, 1000);
            }).catch((error) => {
                console.error('Error al cerrar sesión:', error);
                showNotification("Error al cerrar sesión", "error");
            });
        });
    }

    // Botón de perfil
    const profileMenuItem = document.querySelector('.dropdown-item:nth-child(1)');
    if (profileMenuItem) {
        profileMenuItem.addEventListener('click', (e) => {
            e.preventDefault();
            openProfileModal();
        });
    }

    // Botón de configuración
    const settingsMenuItem = document.querySelector('.dropdown-item:nth-child(2)');
    if (settingsMenuItem) {
        settingsMenuItem.addEventListener('click', (e) => {
            e.preventDefault();
            openSettingsModal();
        });
    }

    // Botón de cambiar contraseña
    const passwordMenuItem = document.querySelector('.dropdown-item:nth-child(3)');
    if (passwordMenuItem) {
        passwordMenuItem.addEventListener('click', (e) => {
            e.preventDefault();
            openChangePasswordModal();
        });
    }

    // Botón de eliminar cuenta
    const deleteAccountMenuItem = document.querySelector('.dropdown-item:nth-child(4)');
    if (deleteAccountMenuItem) {
        deleteAccountMenuItem.addEventListener('click', (e) => {
            e.preventDefault();
            openDeleteAccountModal();
        });
    }
}

// Función para abrir modal de perfil
function openProfileModal() {
    // Crear modal
    const modal = createModal('Editar Perfil');

    // Obtener usuario actual
    const user = auth.currentUser;
    if (!user) return;

    // Obtener datos del usuario
    getDoc(doc(db, "users", user.uid)).then((docSnapshot) => {
        if (docSnapshot.exists()) {
            const userData = docSnapshot.data();

            // Crear formulario
            const form = document.createElement('form');
            form.id = 'profileForm';
            form.innerHTML = `
                <div class="form-group">
                    <label for="profileName">Nombre</label>
                    <input type="text" id="profileName" value="${userData.name || ''}" placeholder="Tu nombre" required>
                </div>
                <div class="form-group">
                    <label for="profileEmail">Email</label>
                    <input type="email" id="profileEmail" value="${userData.email || user.email}" disabled>
                    <p class="form-help">El email no se puede cambiar</p>
                </div>
                <div class="form-group">
                    <label for="profileBio">Biografía</label>
                    <textarea id="profileBio" placeholder="Cuéntanos sobre ti">${userData.bio || ''}</textarea>
                </div>
                <div class="form-group">
                    <label>Foto de perfil</label>
                    <div class="profile-image-upload">
                        <div class="profile-image-preview">
                            <div class="avatar-placeholder">${(userData.name || '').split(' ').map(n => n[0]).join('')}</div>
                        </div>
                        <input type="file" id="profileImage" accept="image/*">
                        <label for="profileImage" class="upload-button">Cambiar foto</label>
                    </div>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-secondary modal-cancel">Cancelar</button>
                    <button type="submit" class="btn-primary">Guardar cambios</button>
                </div>
            `;

            // Añadir formulario al modal
            modal.querySelector('.modal-content').appendChild(form);

            // Evento para cancelar
            modal.querySelector('.modal-cancel').addEventListener('click', () => {
                closeModal(modal);
            });

            // Evento para guardar cambios
            form.addEventListener('submit', (e) => {
                e.preventDefault();

                const name = document.getElementById('profileName').value.trim();
                const bio = document.getElementById('profileBio').value.trim();
                const imageFile = document.getElementById('profileImage').files[0];

                updateUserProfile(user.uid, name, bio, imageFile, modal);
            });

            // Previsualizar imagen seleccionada
            const imageInput = document.getElementById('profileImage');
            imageInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const preview = document.querySelector('.profile-image-preview');
                        preview.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Si ya tiene imagen de perfil, mostrarla
            if (userData.profileImage) {
                const preview = document.querySelector('.profile-image-preview');
                preview.innerHTML = `<img src="${userData.profileImage}" alt="Profile">`;
            }
        }
    }).catch(error => {
        console.error("Error al cargar datos del perfil:", error);
        closeModal(modal);
        showNotification("Error al cargar datos del perfil", "error");
    });
}

// Función para actualizar perfil de usuario
function updateUserProfile(userId, name, bio, imageFile, modal) {
    // Mostrar indicador de carga
    const submitButton = modal.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = 'Guardando...';

    // Preparar datos a actualizar
    const updates = {
        name,
        bio,
        updatedAt: serverTimestamp()
    };

    // Función para actualizar el documento
    const updateDocument = (imageUrl = null) => {
        if (imageUrl) {
            updates.profileImage = imageUrl;
        }

        updateDoc(doc(db, "users", userId), updates)
            .then(() => {
                closeModal(modal);
                showNotification("Perfil actualizado correctamente");

                // Actualizar UI
                document.querySelector('.dropdown-user-info h3').textContent = name;

                const initials = name.split(' ').map(n => n[0]).join('');
                document.querySelectorAll('.avatar-placeholder').forEach(el => {
                    el.textContent = initials;
                });

                // Recargar para ver cambios
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            })
            .catch(error => {
                console.error("Error al actualizar perfil:", error);
                submitButton.disabled = false;
                submitButton.textContent = originalText;
                showNotification("Error al actualizar perfil", "error");
            });
    };

    // Si hay imagen, subirla primero
    if (imageFile) {
        const storageRef = ref(storage, `profile_images/${userId}`);
        uploadBytes(storageRef, imageFile)
            .then(snapshot => getDownloadURL(snapshot.ref))
            .then(downloadURL => {
                updateDocument(downloadURL);
            })
            .catch(error => {
                console.error("Error al subir imagen:", error);
                submitButton.disabled = false;
                submitButton.textContent = originalText;
                showNotification("Error al subir imagen", "error");
            });
    } else {
        updateDocument();
    }
}

// Función para abrir modal de configuración
function openSettingsModal() {
    // Crear modal
    const modal = createModal('Configuración');

    // Crear contenido
    const content = document.createElement('div');
    content.className = 'settings-content';
    content.innerHTML = `
        <div class="settings-section">
            <h3>Notificaciones</h3>
            <div class="settings-option">
                <label for="notifyMessages">Notificar nuevos mensajes</label>
                <input type="checkbox" id="notifyMessages" checked>
            </div>
            <div class="settings-option">
                <label for="notifyGroups">Notificar mensajes de grupo</label>
                <input type="checkbox" id="notifyGroups" checked>
            </div>
        </div>
        <div class="settings-section">
            <h3>Privacidad</h3>
            <div class="settings-option">
                <label for="showStatus">Mostrar estado en línea</label>
                <input type="checkbox" id="showStatus" checked>
            </div>
            <div class="settings-option">
                <label for="readReceipts">Enviar confirmaciones de lectura</label>
                <input type="checkbox" id="readReceipts" checked>
            </div>
        </div>
        <div class="modal-actions">
            <button type="button" class="btn-secondary modal-cancel">Cancelar</button>
            <button type="button" class="btn-primary" id="saveSettings">Guardar cambios</button>
        </div>
    `;

    // Añadir contenido al modal
    modal.querySelector('.modal-content').appendChild(content);

    // Evento para cancelar
    modal.querySelector('.modal-cancel').addEventListener('click', () => {
        closeModal(modal);
    });

    // Evento para guardar cambios
    document.getElementById('saveSettings').addEventListener('click', () => {
        // Obtener valores
        const notifyMessages = document.getElementById('notifyMessages').checked;
        const notifyGroups = document.getElementById('notifyGroups').checked;
        const showStatus = document.getElementById('showStatus').checked;
        const readReceipts = document.getElementById('readReceipts').checked;

        // Guardar configuración
        const user = auth.currentUser;
        if (user) {
            updateDoc(doc(db, "users", user.uid), {
                    settings: {
                        notifyMessages,
                        notifyGroups,
                        showStatus,
                        readReceipts
                    },
                    updatedAt: serverTimestamp()
                })
                .then(() => {
                    closeModal(modal);
                    showNotification("Configuración guardada correctamente");
                })
                .catch(error => {
                    console.error("Error al guardar configuración:", error);
                    showNotification("Error al guardar configuración", "error");
                });
        }
    });

    // Cargar configuración actual
    const user = auth.currentUser;
    if (user) {
        getDoc(doc(db, "users", user.uid)).then((docSnapshot) => {
            if (docSnapshot.exists()) {
                const userData = docSnapshot.data();
                if (userData.settings) {
                    document.getElementById('notifyMessages').checked = userData.settings.notifyMessages !== false;
                    document.getElementById('notifyGroups').checked = userData.settings.notifyGroups !== false;
                    document.getElementById('showStatus').checked = userData.settings.showStatus !== false;
                    document.getElementById('readReceipts').checked = userData.settings.readReceipts !== false;
                }
            }
        });
    }
}

// Función para abrir modal de cambio de contraseña
function openChangePasswordModal() {
    // Crear modal
    const modal = createModal('Cambiar Contraseña');

    // Crear formulario
    const form = document.createElement('form');
    form.id = 'passwordForm';
    form.innerHTML = `
        <div class="form-group">
            <label for="currentPassword">Contraseña actual</label>
            <input type="password" id="currentPassword" placeholder="Ingresa tu contraseña actual" required>
        </div>
        <div class="form-group">
            <label for="newPassword">Nueva contraseña</label>
            <input type="password" id="newPassword" placeholder="Ingresa tu nueva contraseña" required minlength="6">
            <p class="form-help">La contraseña debe tener al menos 6 caracteres</p>
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirmar contraseña</label>
            <input type="password" id="confirmPassword" placeholder="Confirma tu nueva contraseña" required minlength="6">
        </div>
        <div class="modal-actions">
            <button type="button" class="btn-secondary modal-cancel">Cancelar</button>
            <button type="submit" class="btn-primary">Cambiar contraseña</button>
        </div>
    `;

    // Añadir formulario al modal
    modal.querySelector('.modal-content').appendChild(form);

    // Evento para cancelar
    modal.querySelector('.modal-cancel').addEventListener('click', () => {
        closeModal(modal);
    });

    // Evento para cambiar contraseña
    form.addEventListener('submit', (e) => {
        e.preventDefault();

        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        // Validar que las contraseñas coincidan
        if (newPassword !== confirmPassword) {
            showNotification("Las contraseñas no coinciden", "error");
            return;
        }

        changePassword(currentPassword, newPassword, modal);
    });
}

// Función para cambiar contraseña
function changePassword(currentPassword, newPassword, modal) {
    const user = auth.currentUser;
    if (!user || !user.email) {
        showNotification("Error: No se pudo obtener la información del usuario", "error");
        return;
    }

    // Mostrar indicador de carga
    const submitButton = modal.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = 'Cambiando...';

    // Reautenticar al usuario
    const credential = EmailAuthProvider.credential(user.email, currentPassword);

    reauthenticateWithCredential(user, credential)
        .then(() => {
            // Actualizar contraseña
            return updatePassword(user, newPassword);
        })
        .then(() => {
            closeModal(modal);
            showNotification("Contraseña cambiada correctamente");
        })
        .catch(error => {
            console.error("Error al cambiar contraseña:", error);

            let errorMessage = "Error al cambiar contraseña";
            if (error.code === 'auth/wrong-password') {
                errorMessage = "La contraseña actual es incorrecta";
            } else if (error.code === 'auth/weak-password') {
                errorMessage = "La nueva contraseña es demasiado débil";
            }

            showNotification(errorMessage, "error");
            submitButton.disabled = false;
            submitButton.textContent = originalText;
        });
}

// Función para abrir modal de eliminación de cuenta
function openDeleteAccountModal() {
    // Crear modal
    const modal = createModal('Eliminar Cuenta', 'danger');

    // Crear contenido
    const content = document.createElement('div');
    content.className = 'delete-account-content';
    content.innerHTML = `
        <div class="warning-message">
            <p>⚠️ Esta acción es irreversible. Al eliminar tu cuenta:</p>
            <ul>
                <li>Se eliminarán todos tus datos personales</li>
                <li>Se eliminarán todos tus mensajes y chats</li>
                <li>Perderás acceso a la aplicación</li>
            </ul>
        </div>
        <div class="confirmation-form">
            <p>Para confirmar, escribe "ELIMINAR" en el campo a continuación:</p>
            <input type="text" id="deleteConfirmation" placeholder="Escribe ELIMINAR">
            <div class="password-verification">
                <label for="deletePassword">Ingresa tu contraseña para confirmar:</label>
                <input type="password" id="deletePassword" placeholder="Tu contraseña">
            </div>
        </div>
        <div class="modal-actions">
            <button type="button" class="btn-secondary modal-cancel">Cancelar</button>
            <button type="button" class="btn-danger" id="confirmDelete" disabled>Eliminar cuenta</button>
        </div>
    `;

    // Añadir contenido al modal
    modal.querySelector('.modal-content').appendChild(content);

    // Evento para cancelar
    modal.querySelector('.modal-cancel').addEventListener('click', () => {
        closeModal(modal);
    });

    // Habilitar/deshabilitar botón según confirmación
    const confirmInput = document.getElementById('deleteConfirmation');
    const passwordInput = document.getElementById('deletePassword');
    const deleteButton = document.getElementById('confirmDelete');

    const checkConfirmation = () => {
        const isConfirmed = confirmInput.value === 'ELIMINAR';
        const hasPassword = passwordInput.value.length > 0;
        deleteButton.disabled = !(isConfirmed && hasPassword);
    };

    confirmInput.addEventListener('input', checkConfirmation);
    passwordInput.addEventListener('input', checkConfirmation);

    // Evento para eliminar cuenta
    deleteButton.addEventListener('click', () => {
        const password = passwordInput.value;
        deleteUserAccount(password, modal);
    });
}

// Función para eliminar cuenta de usuario
function deleteUserAccount(password, modal) {
    const user = auth.currentUser;
    if (!user || !user.email) {
        showNotification("Error: No se pudo obtener la información del usuario", "error");
        return;
    }

    // Mostrar indicador de carga
    const deleteButton = document.getElementById('confirmDelete');
    const originalText = deleteButton.textContent;
    deleteButton.disabled = true;
    deleteButton.textContent = 'Eliminando...';

    // Reautenticar al usuario
    const credential = EmailAuthProvider.credential(user.email, password);

    reauthenticateWithCredential(user, credential)
        .then(() => {
            // Eliminar datos del usuario en Firestore
            return deleteDoc(doc(db, "users", user.uid));
        })
        .then(() => {
            // Eliminar imagen de perfil si existe
            const storageRef = ref(storage, `profile_images/${user.uid}`);
            return deleteObject(storageRef).catch(() => {
                // Ignorar error si no existe la imagen
                return Promise.resolve();
            });
        })
        .then(() => {
            // Eliminar chats donde el usuario es participante
            return getDocs(
                query(collection(db, "chats"), where("participants", "array-contains", user.uid))
            );
        })
        .then((chatSnapshots) => {
            const deletePromises = chatSnapshots.docs.map(chatDoc => {
                return deleteDoc(doc(db, "chats", chatDoc.id));
            });
            return Promise.all(deletePromises);
        })
        .then(() => {
            // Finalmente, eliminar la cuenta de autenticación
            return deleteUser(user);
        })
        .then(() => {
            closeModal(modal);
            showNotification("Cuenta eliminada correctamente");

            // Redirigir al inicio
            setTimeout(() => {
                window.location.href = "../index.html";
            }, 2000);
        })
        .catch(error => {
            console.error("Error al eliminar cuenta:", error);

            let errorMessage = "Error al eliminar la cuenta";
            if (error.code === 'auth/wrong-password') {
                errorMessage = "La contraseña es incorrecta";
            }

            showNotification(errorMessage, "error");
            deleteButton.disabled = false;
            deleteButton.textContent = originalText;
        });
}

// Función para crear un modal
function createModal(title, type = 'default') {
    // Crear elementos del modal
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';

    const modalContainer = document.createElement('div');
    modalContainer.className = `modal-container ${type}`;

    const modalHeader = document.createElement('div');
    modalHeader.className = 'modal-header';
    modalHeader.innerHTML = `
        <h2>${title}</h2>
        <button class="modal-close">&times;</button>
    `;

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';

    // Estructurar modal
    modalContainer.appendChild(modalHeader);
    modalContainer.appendChild(modalContent);
    modalOverlay.appendChild(modalContainer);

    // Añadir al DOM
    document.body.appendChild(modalOverlay);

    // Evento para cerrar modal
    modalHeader.querySelector('.modal-close').addEventListener('click', () => {
        closeModal(modalOverlay);
    });

    // Cerrar al hacer clic fuera
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
            closeModal(modalOverlay);
        }
    });

    // Mostrar con animación
    setTimeout(() => {
        modalOverlay.classList.add('show');
    }, 10);

    return modalOverlay;
}

// Función para cerrar un modal
function closeModal(modal) {
    modal.classList.remove('show');
    setTimeout(() => {
        modal.remove();
    }, 300);
}

// Añadir estilos CSS para modales y notificaciones
const styleElement = document.createElement('style');
styleElement.textContent = `
    /* Estilos para modales */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s, visibility 0.3s;
    }
    
    .modal-overlay.show {
        opacity: 1;
        visibility: visible;
    }
    
    .modal-container {
        width: 90%;
        max-width: 500px;
        background-color: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
        transform: scale(0.9);
        transition: transform 0.3s;
    }
    
    .modal-overlay.show .modal-container {
        transform: scale(1);
    }
    
    .modal-container.danger {
        border-top: 4px solid #ff5252;
    }
    
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        border-bottom: 1px solid #eee;
    }
    
    .modal-header h2 {
        margin: 0;
        font-size: 18px;
        color: #333;
    }
    
    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #999;
    }
    
    .modal-content {
        padding: 16px;
        max-height: 70vh;
        overflow-y: auto;
    }
    
    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }
    
    /* Estilos para formularios en modales */
    .form-group {
        margin-bottom: 16px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: #333;
    }
    
    .form-group input,
    .form-group textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 14px;
    }
    
    .form-group textarea {
        min-height: 80px;
        resize: vertical;
    }
    
    .form-help {
        font-size: 12px;
        color: #666;
        margin-top: 4px;
    }
    
    /* Estilos para botones */
    .btn-primary,
    .btn-secondary,
    .btn-danger {
        padding: 10px 16px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        border: none;
        transition: background-color 0.2s;
    }
    
    .btn-primary {
        background-color: #9D39B6;
        color: white;
    }
    
    .btn-primary:hover {
        background-color: #8A2EA0;
    }
    
    .btn-secondary {
        background-color: #f5f5f5;
        color: #333;
    }
    
    .btn-secondary:hover {
        background-color: #e5e5e5;
    }
    
    .btn-danger {
        background-color: #ff5252;
        color: white;
    }
    
    .btn-danger:hover {
        background-color: #ff3838;
    }
    
    button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    
    /* Estilos para subida de imágenes */
    .profile-image-upload {
        display: flex;
        align-items: center;
        gap: 16px;
    }
    
    .profile-image-preview {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background-color: #f0f0f0;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }
    
    .profile-image-preview img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    input[type="file"] {
        display: none;
    }
    
    .upload-button {
        padding: 8px 12px;
        background-color: #f0f0f0;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s;
    }
    
    .upload-button:hover {
        background-color: #e0e0e0;
    }
    
    /* Estilos para configuración */
    .settings-section {
        margin-bottom: 20px;
    }
    
    .settings-section h3 {
        font-size: 16px;
        margin-bottom: 10px;
        color: #333;
    }
    
    .settings-option {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .settings-option label {
        font-size: 14px;
        color: #333;
    }
    
    /* Estilos para eliminar cuenta */
    .warning-message {
        background-color: #fff8f8;
        border-left: 4px solid #ff5252;
        padding: 12px;
        margin-bottom: 20px;
    }
    
    .warning-message p {
        margin: 0 0 10px 0;
        font-weight: 500;
        color: #333;
    }
    
    .warning-message ul {
        margin: 0;
        padding-left: 20px;
    }
    
    .warning-message li {
        margin-bottom: 5px;
        color: #555;
    }
    
    .confirmation-form {
        margin-bottom: 20px;
    }
    
    .confirmation-form p {
        margin-bottom: 10px;
        color: #333;
    }
    
    .password-verification {
        margin-top: 16px;
    }
    
    .password-verification label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: #333;
    }
    
    /* Estilos para notificaciones */
    .notification {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%) translateY(100px);
        padding: 12px 20px;
        border-radius: 8px;
        background-color: #4CAF50;
        color: white;
        font-size: 14px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        z-index: 1100;
        transition: transform 0.3s;
    }
    
    .notification.show {
        transform: translateX(-50%) translateY(0);
    }
    
    .notification.error {
        background-color: #ff5252;
    }
    
    /* Estilos para "no hay datos" */
    .no-data {
        text-align: center;
        color: rgba(255, 255, 255, 0.6);
        font-size: 14px;
        padding: 20px 0;
    }
`;

document.head.appendChild(styleElement);